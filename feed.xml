<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://khaitran22.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://khaitran22.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-09-27T10:31:19+00:00</updated><id>https://khaitran22.github.io/feed.xml</id><title type="html">blank</title><subtitle>Khai Tran&apos;s Personal Website. </subtitle><entry><title type="html">House Robber problem - Leetcode 198</title><link href="https://khaitran22.github.io/blog/2025/leetcode-198/" rel="alternate" type="text/html" title="House Robber problem - Leetcode 198"/><published>2025-04-23T22:00:00+00:00</published><updated>2025-04-23T22:00:00+00:00</updated><id>https://khaitran22.github.io/blog/2025/leetcode-198</id><content type="html" xml:base="https://khaitran22.github.io/blog/2025/leetcode-198/"><![CDATA[<p>A notes on the Problem #198 - House Robber on Leetcode when I practiced Dynamic Programming.</p> <h3 id="question">Question</h3> <blockquote> <p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and <strong>it will automatically contact the police if two adjacent houses were broken into on the same night</strong>.</p> <p>Given an integer array <code class="language-plaintext highlighter-rouge">nums</code> representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.</p> </blockquote> <p><strong>Example 1</strong>:</p> <ul> <li>Input: <code class="language-plaintext highlighter-rouge">nums = [1,2,3,1]</code></li> <li>Output: <code class="language-plaintext highlighter-rouge">4</code></li> <li>Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount you can rob = 1 + 3 = 4.</li> </ul> <p><strong>Example 2</strong>:</p> <ul> <li>Input: <code class="language-plaintext highlighter-rouge">nums = [2,7,9,3,1]</code></li> <li>Output: <code class="language-plaintext highlighter-rouge">12</code></li> <li>Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1). Total amount you can rob = 2 + 9 + 1 = 12.</li> </ul> <hr/> <h3 id="intuition">Intuition</h3> <p>The core intuition behind this problem is:</p> <blockquote class="block-tip"> <p>When standing in front of a house, you have to decide whether to rob it or not. If you choose to rob it, make sure not to trigger the security system by robbing adjacent houses.</p> </blockquote> <h3 id="approach">Approach</h3> <p>With that in mind, I explored two approaches:</p> <ul> <li><strong>Brute-force approach</strong></li> <li><strong>Dynamic Programming (DP) approach</strong></li> </ul> <h4 id="brute-force-approach">Brute-force Approach</h4> <p>This approach considers all valid combinations of houses that can be robbed without triggering the alarm system. To do this, I generated all binary lists of length <code class="language-plaintext highlighter-rouge">n</code>, where each element is either <code class="language-plaintext highlighter-rouge">0</code> or <code class="language-plaintext highlighter-rouge">1</code>. A <code class="language-plaintext highlighter-rouge">1</code> at position <code class="language-plaintext highlighter-rouge">i</code> indicates that the <code class="language-plaintext highlighter-rouge">i-th</code> house is robbed, and <code class="language-plaintext highlighter-rouge">0</code> means it’s skipped. To ensure we don’t rob two adjacent houses, we filter out any combinations where two <code class="language-plaintext highlighter-rouge">1</code>s are next to each other.</p> <p>Here’s the implementation for generating those valid combinations:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="k">def</span> <span class="nf">generate_binary_lists</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="n">result</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">]]</span>
    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
        <span class="n">new_result</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">lst</span> <span class="ow">in</span> <span class="n">result</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">lst</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">new_result</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">lst</span> <span class="o">+</span> <span class="p">[</span><span class="mi">0</span><span class="p">])</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">new_result</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">lst</span> <span class="o">+</span> <span class="p">[</span><span class="mi">1</span><span class="p">])</span>
                <span class="n">new_result</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">lst</span> <span class="o">+</span> <span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="n">result</span> <span class="o">=</span> <span class="n">new_result</span>
    <span class="k">return</span> <span class="n">result</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>Once we have all the valid combinations, we calculate the amount of money we can rob for each and keep track of the maximum:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="k">def</span> <span class="nf">rob</span><span class="p">(</span><span class="n">nums</span><span class="p">):</span>
    <span class="n">all_binary_lists</span> <span class="o">=</span> <span class="nf">generate_binary_lists</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">))</span>
    <span class="n">max_money</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="sh">"</span><span class="s">-inf</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">current_max_robbed_house</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="k">for</span> <span class="n">lst</span> <span class="ow">in</span> <span class="n">all_binary_lists</span><span class="p">:</span>
        <span class="n">current_money</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">lst</span><span class="p">)):</span>
            <span class="n">current_money</span> <span class="o">+=</span> <span class="n">lst</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            <span class="k">if</span> <span class="n">current_money</span> <span class="o">&gt;</span> <span class="n">max_money</span><span class="p">:</span>
                <span class="n">max_money</span> <span class="o">=</span> <span class="n">current_money</span>
    <span class="k">return</span> <span class="n">max_money</span><span class="p">,</span> <span class="n">current_max_robbed_house</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>This approach worked for <strong>47 out of 70</strong> test cases on LeetCode. However, it failed with a <code class="language-plaintext highlighter-rouge">Memory Limit Exceeded</code> error on the $48^{th}$ test case due to the exponential number of combinations.</p> <h4 id="dynamic-programming-approach">Dynamic Programming Approach</h4> <p>To address the memory issue, I turned to dynamic programming.</p> <h5 id="observation">Observation</h5> <p>At any house <code class="language-plaintext highlighter-rouge">i</code>, you have two choices:</p> <ol> <li><em>Rob house <code class="language-plaintext highlighter-rouge">i</code></em>: You must skip house <code class="language-plaintext highlighter-rouge">i-1</code>, so the total is the value at house <code class="language-plaintext highlighter-rouge">i</code> plus the max value when house <code class="language-plaintext highlighter-rouge">i-1</code> wasn’t robbed.</li> <li><em>Skip house <code class="language-plaintext highlighter-rouge">i</code></em>: You take the max of robbing or skipping house <code class="language-plaintext highlighter-rouge">i-1</code>.</li> </ol> <h5 id="step-by-step-example">Step-by-Step Example</h5> <p>Let’s walk through the array <code class="language-plaintext highlighter-rouge">[2, 7, 9, 3, 1]</code>.</p> <table> <thead> <tr> <th style="text-align: left">House</th> <th style="text-align: left">Value</th> <th style="text-align: left">rob (rob this)</th> <th style="text-align: left">not_rob (skip this)</th> <th style="text-align: left">Explanation</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">0</td> <td style="text-align: left">2</td> <td style="text-align: left">2</td> <td style="text-align: left">0</td> <td style="text-align: left">Rob first house</td> </tr> <tr> <td style="text-align: left">1</td> <td style="text-align: left">7</td> <td style="text-align: left">0 + 7 = 7</td> <td style="text-align: left">max(0, 2) = 2</td> <td style="text-align: left">Rob 1, skip 0; or skip 1</td> </tr> <tr> <td style="text-align: left">2</td> <td style="text-align: left">9</td> <td style="text-align: left">2 + 9 = 11</td> <td style="text-align: left">max(7, 2) = 7</td> <td style="text-align: left">Rob 2, skip 1; or skip 2</td> </tr> <tr> <td style="text-align: left">3</td> <td style="text-align: left">3</td> <td style="text-align: left">7 + 3 = 10</td> <td style="text-align: left">max(11, 7) = 11</td> <td style="text-align: left">Rob 3, skip 2; or skip 3</td> </tr> <tr> <td style="text-align: left">4</td> <td style="text-align: left">1</td> <td style="text-align: left">11 + 1 = 12</td> <td style="text-align: left">max(11, 10) = 11</td> <td style="text-align: left">Rob 4, skip 3; or skip 4</td> </tr> </tbody> </table> <p>At the end, we return:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">max</span><span class="p">(</span><span class="n">rob</span><span class="p">,</span> <span class="n">not_rob</span><span class="p">)</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">11</span><span class="p">)</span> <span class="o">=</span> <span class="mi">12</span>
</code></pre></div></div> <h5 id="implementation">Implementation</h5> <p>We use two variables to keep track of:</p> <ul> <li><code class="language-plaintext highlighter-rouge">rob_amount</code>: max money if we rob the current house.</li> <li><code class="language-plaintext highlighter-rouge">not_rob_amount</code>: max money if we skip the current house.</li> </ul> <p>We update these as we iterate through the houses:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="k">def</span> <span class="nf">rob</span><span class="p">(</span><span class="n">nums</span><span class="p">):</span>
    <span class="n">rob_amount</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">not_rob_amount</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)):</span>
        <span class="c1"># if rob this i-th house
</span>        <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">rob_amount</span> <span class="o">+=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">amount_if_rob</span> <span class="o">=</span> <span class="n">not_rob_amount</span> <span class="o">+</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            <span class="n">not_rob_amount</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">rob_amount</span><span class="p">,</span> <span class="n">not_rob_amount</span><span class="p">)</span>
            <span class="n">rob_amount</span> <span class="o">=</span> <span class="n">amount_if_rob</span>
    <span class="k">return</span> <span class="nf">max</span><span class="p">(</span><span class="n">not_rob_amount</span><span class="p">,</span> <span class="n">rob_amount</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>This solution is efficient and passes all test cases. It runs in <strong>O(n)</strong> time and uses <strong>O(1)</strong> space.</p>]]></content><author><name></name></author><category term="leetcode-solutions"/><category term="houserobber"/><category term="leetcode"/><category term="DP"/><summary type="html"><![CDATA[My notes for the House Robber problem on Leetcode]]></summary></entry><entry><title type="html">House Robber II problem - Leetcode 213</title><link href="https://khaitran22.github.io/blog/2025/leetcode-213/" rel="alternate" type="text/html" title="House Robber II problem - Leetcode 213"/><published>2025-04-23T22:00:00+00:00</published><updated>2025-04-23T22:00:00+00:00</updated><id>https://khaitran22.github.io/blog/2025/leetcode-213</id><content type="html" xml:base="https://khaitran22.github.io/blog/2025/leetcode-213/"><![CDATA[<p>A notes on the Problem #213 - House Robber II on Leetcode when I practiced Dynamic Programming.</p> <h3 id="question">Question</h3> <blockquote> <p>YYou are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are <strong>arranged in a circle</strong>. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and <strong>it will automatically contact the police if two adjacent houses were broken into on the same night</strong>.</p> <p>Given an integer array <code class="language-plaintext highlighter-rouge">nums</code> representing the amount of money of each house, return <em>the maximum amount of money you can rob tonight without <strong>alerting the police</strong></em>.</p> </blockquote> <p><strong>Example 1</strong>:</p> <ul> <li>Input: <code class="language-plaintext highlighter-rouge">nums = [2,3,2]</code></li> <li>Output: <code class="language-plaintext highlighter-rouge">3</code></li> <li>Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.</li> </ul> <p><strong>Example 2</strong>:</p> <ul> <li>Input: <code class="language-plaintext highlighter-rouge">nums = [1,2,3,1]</code></li> <li>Output: <code class="language-plaintext highlighter-rouge">4</code></li> <li>Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount you can rob = 1 + 3 = 4.</li> </ul> <p><strong>Example 3</strong>:</p> <ul> <li>Input: <code class="language-plaintext highlighter-rouge">nums = [1,2,3]</code></li> <li>Output: <code class="language-plaintext highlighter-rouge">3</code></li> </ul> <hr/> <h3 id="intuition">Intuition</h3> <p>This problem is an expansion of the Problem #198 - House Robber where they add an addition restriction that all houses form a circle (i.e., the last house is a neighbor the first house). Thus we can just adapt <a href="https://khaitran22.github.io/blog/2025/leetcode-198/">the code of the Problem #198</a> for this problem.</p> <h3 id="approach">Approach</h3> <p>There are also two approaches same as the problem #198:</p> <ul> <li><strong>Brute-force approach</strong></li> <li><strong>Dynamic Programming (DP) approach</strong></li> </ul> <h4 id="brute-force-approach">Brute-force Approach</h4> <p>In the problem #198, the brute-force approach as below:</p> <blockquote> <p>This approach considers all valid combinations of houses that can be robbed without triggering the alarm system. To do this, I generated all binary lists of length <code class="language-plaintext highlighter-rouge">n</code>, where each element is either <code class="language-plaintext highlighter-rouge">0</code> or <code class="language-plaintext highlighter-rouge">1</code>. A <code class="language-plaintext highlighter-rouge">1</code> at position <code class="language-plaintext highlighter-rouge">i</code> indicates that the <code class="language-plaintext highlighter-rouge">i-th</code> house is robbed, and <code class="language-plaintext highlighter-rouge">0</code> means it’s skipped. To ensure we don’t rob two adjacent houses, we filter out any combinations where two <code class="language-plaintext highlighter-rouge">1</code>s are next to each other.</p> </blockquote> <p>Now the approach is extended to exclude the binary vector where the first and the last element are <code class="language-plaintext highlighter-rouge">1</code>s to take into account for the additional restriction. Thus, I just added an additional code:</p> <div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">def generate_binary_lists(n):
</span>    result = [[0], [1]]
    for _ in range(1, n):
        new_result = []
        for lst in result:
            if lst[-1] == 1:
                new_result.append(lst + [0])
            else:
                new_result.append(lst + [1])
                new_result.append(lst + [0])
        result = new_result
    +for i, lst in enumerate(result):
    +   if len(lst) &gt; 1:
    +       if lst[0] * lst[-1] != 0:
    +           result.pop(i)
    return result
</code></pre></div></div> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="k">def</span> <span class="nf">generate_binary_lists</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="n">result</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">]]</span>
    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
        <span class="n">new_result</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">lst</span> <span class="ow">in</span> <span class="n">result</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">lst</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">new_result</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">lst</span> <span class="o">+</span> <span class="p">[</span><span class="mi">0</span><span class="p">])</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">new_result</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">lst</span> <span class="o">+</span> <span class="p">[</span><span class="mi">1</span><span class="p">])</span>
                <span class="n">new_result</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">lst</span> <span class="o">+</span> <span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="n">result</span> <span class="o">=</span> <span class="n">new_result</span>
    <span class="k">return</span> <span class="n">result</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>Once we have all the valid combinations, we calculate the amount of money we can rob for each and keep track of the maximum:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="k">def</span> <span class="nf">rob</span><span class="p">(</span><span class="n">nums</span><span class="p">):</span>
    <span class="n">all_binary_lists</span> <span class="o">=</span> <span class="nf">generate_binary_lists</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">))</span>
    <span class="n">max_money</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="sh">"</span><span class="s">-inf</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">current_max_robbed_house</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="k">for</span> <span class="n">lst</span> <span class="ow">in</span> <span class="n">all_binary_lists</span><span class="p">:</span>
        <span class="n">current_money</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">lst</span><span class="p">)):</span>
            <span class="n">current_money</span> <span class="o">+=</span> <span class="n">lst</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            <span class="k">if</span> <span class="n">current_money</span> <span class="o">&gt;</span> <span class="n">max_money</span><span class="p">:</span>
                <span class="n">max_money</span> <span class="o">=</span> <span class="n">current_money</span>
    <span class="k">return</span> <span class="n">max_money</span><span class="p">,</span> <span class="n">current_max_robbed_house</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>This approach worked for <strong>47 out of 70</strong> test cases on LeetCode. However, it failed with a <code class="language-plaintext highlighter-rouge">Memory Limit Exceeded</code> error on the $48^{th}$ test case due to the exponential number of combinations.</p> <h4 id="dynamic-programming-approach">Dynamic Programming Approach</h4> <p>To address the memory issue, I turned to dynamic programming.</p> <h5 id="observation">Observation</h5> <p>At any house <code class="language-plaintext highlighter-rouge">i</code>, you have two choices:</p> <ol> <li><em>Rob house <code class="language-plaintext highlighter-rouge">i</code></em>: You must skip house <code class="language-plaintext highlighter-rouge">i-1</code>, so the total is the value at house <code class="language-plaintext highlighter-rouge">i</code> plus the max value when house <code class="language-plaintext highlighter-rouge">i-1</code> wasn’t robbed.</li> <li><em>Skip house <code class="language-plaintext highlighter-rouge">i</code></em>: You take the max of robbing or skipping house <code class="language-plaintext highlighter-rouge">i-1</code>.</li> </ol> <h5 id="step-by-step-example">Step-by-Step Example</h5> <p>Let’s walk through the array <code class="language-plaintext highlighter-rouge">[2, 7, 9, 3, 1]</code>.</p> <table> <thead> <tr> <th style="text-align: left">House</th> <th style="text-align: left">Value</th> <th style="text-align: left">rob (rob this)</th> <th style="text-align: left">not_rob (skip this)</th> <th style="text-align: left">Explanation</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">0</td> <td style="text-align: left">2</td> <td style="text-align: left">2</td> <td style="text-align: left">0</td> <td style="text-align: left">Rob first house</td> </tr> <tr> <td style="text-align: left">1</td> <td style="text-align: left">7</td> <td style="text-align: left">0 + 7 = 7</td> <td style="text-align: left">max(0, 2) = 2</td> <td style="text-align: left">Rob 1, skip 0; or skip 1</td> </tr> <tr> <td style="text-align: left">2</td> <td style="text-align: left">9</td> <td style="text-align: left">2 + 9 = 11</td> <td style="text-align: left">max(7, 2) = 7</td> <td style="text-align: left">Rob 2, skip 1; or skip 2</td> </tr> <tr> <td style="text-align: left">3</td> <td style="text-align: left">3</td> <td style="text-align: left">7 + 3 = 10</td> <td style="text-align: left">max(11, 7) = 11</td> <td style="text-align: left">Rob 3, skip 2; or skip 3</td> </tr> <tr> <td style="text-align: left">4</td> <td style="text-align: left">1</td> <td style="text-align: left">11 + 1 = 12</td> <td style="text-align: left">max(11, 10) = 11</td> <td style="text-align: left">Rob 4, skip 3; or skip 4</td> </tr> </tbody> </table> <p>At the end, we return:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">max</span><span class="p">(</span><span class="n">rob</span><span class="p">,</span> <span class="n">not_rob</span><span class="p">)</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">11</span><span class="p">)</span> <span class="o">=</span> <span class="mi">12</span>
</code></pre></div></div> <h5 id="implementation">Implementation</h5> <p>We use two variables to keep track of:</p> <ul> <li><code class="language-plaintext highlighter-rouge">rob_amount</code>: max money if we rob the current house.</li> <li><code class="language-plaintext highlighter-rouge">not_rob_amount</code>: max money if we skip the current house.</li> </ul> <p>We update these as we iterate through the houses:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="k">def</span> <span class="nf">rob</span><span class="p">(</span><span class="n">nums</span><span class="p">):</span>
    <span class="n">rob_amount</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">not_rob_amount</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)):</span>
        <span class="c1"># if rob this i-th house
</span>        <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">rob_amount</span> <span class="o">+=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">amount_if_rob</span> <span class="o">=</span> <span class="n">not_rob_amount</span> <span class="o">+</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            <span class="n">not_rob_amount</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">rob_amount</span><span class="p">,</span> <span class="n">not_rob_amount</span><span class="p">)</span>
            <span class="n">rob_amount</span> <span class="o">=</span> <span class="n">amount_if_rob</span>
    <span class="k">return</span> <span class="nf">max</span><span class="p">(</span><span class="n">not_rob_amount</span><span class="p">,</span> <span class="n">rob_amount</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>This solution is efficient and passes all test cases. It runs in <strong>O(n)</strong> time and uses <strong>O(1)</strong> space.</p>]]></content><author><name></name></author><category term="leetcode-solutions"/><category term="houserobber"/><category term="leetcode"/><category term="DP"/><summary type="html"><![CDATA[My notes for the House Robber II problem on Leetcode]]></summary></entry><entry><title type="html">a post with plotly.js</title><link href="https://khaitran22.github.io/blog/2025/plotly/" rel="alternate" type="text/html" title="a post with plotly.js"/><published>2025-03-26T14:24:00+00:00</published><updated>2025-03-26T14:24:00+00:00</updated><id>https://khaitran22.github.io/blog/2025/plotly</id><content type="html" xml:base="https://khaitran22.github.io/blog/2025/plotly/"><![CDATA[<p>This is an example post with some <a href="https://plotly.com/javascript/">plotly</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">plotly
</span><span class="sb">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "type": "scatter"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [16, 5, 11, 9],
      "type": "scatter"
    }
  ]
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-plotly">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "type": "scatter"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [16, 5, 11, 9],
      "type": "scatter"
    }
  ]
}
</code></pre> <p>Also another example chart.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">plotly
</span><span class="sb">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "mode": "markers"
    },
    {
      "x": [2, 3, 4, 5],
      "y": [16, 5, 11, 9],
      "mode": "lines"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [12, 9, 15, 12],
      "mode": "lines+markers"
    }
  ],
  "layout": {
    "title": {
      "text": "Line and Scatter Plot"
    }
  }
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>This is how it looks like:</p> <pre><code class="language-plotly">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "mode": "markers"
    },
    {
      "x": [2, 3, 4, 5],
      "y": [16, 5, 11, 9],
      "mode": "lines"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [12, 9, 15, 12],
      "mode": "lines+markers"
    }
  ],
  "layout": {
    "title": {
      "text": "Line and Scatter Plot"
    }
  }
}
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="charts"/><summary type="html"><![CDATA[this is what included plotly.js code could look like]]></summary></entry><entry><title type="html">a post with image galleries</title><link href="https://khaitran22.github.io/blog/2024/photo-gallery/" rel="alternate" type="text/html" title="a post with image galleries"/><published>2024-12-04T01:59:00+00:00</published><updated>2024-12-04T01:59:00+00:00</updated><id>https://khaitran22.github.io/blog/2024/photo-gallery</id><content type="html" xml:base="https://khaitran22.github.io/blog/2024/photo-gallery/"><![CDATA[<p>The images in this post are all zoomable, arranged into different mini-galleries using different libraries.</p> <h2 id="lightbox2"><a href="https://lokeshdhakar.com/projects/lightbox2/">Lightbox2</a></h2> <p><a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/></a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/></a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/></a></p> <hr/> <h2 id="photoswipe"><a href="https://photoswipe.com/">PhotoSwipe</a></h2> <div class="pswp-gallery pswp-gallery--single-column" id="gallery--getting-started"> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg" data-pswp-width="1669" data-pswp-height="2500" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg" alt=""/> </a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/7/img-2500.jpg" data-pswp-width="1875" data-pswp-height="2500" data-cropped="true" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/7/img-200.jpg" alt=""/> </a> <a href="https://unsplash.com" data-pswp-src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg" data-pswp-width="2500" data-pswp-height="1666" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg" alt=""/> </a> <div> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-2500.jpg" data-pswp-width="2500" data-pswp-height="1667" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-200.jpg" alt=""/> </a> </div> </div> <hr/> <h2 id="spotlight-js"><a href="https://nextapps-de.github.io/spotlight/">Spotlight JS</a></h2> <div class="spotlight-group"> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/> </a> </div> <div class="spotlight-group"> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/4/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/4/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/5/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/5/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-200.jpg"/> </a> </div> <hr/> <h2 id="venobox"><a href="https://veno.es/venobox/">Venobox</a></h2> <p><a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/></a> <a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/></a> <a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/></a></p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="images"/><summary type="html"><![CDATA[this is what included image galleries could look like]]></summary></entry></feed>